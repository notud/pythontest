# 逻辑门类
class Logicgate:

    def __init__(self, n):
        self.label = n
        self.output = None

    def getlabel(self):
        return self.label

    def getoutput(self):
        self.output = self.logicaljisuan()
        return self.output


# 多头逻辑门类
class Mgate(Logicgate):

    def __init__(self, n):
        super().__init__(n)

        self.Apin = None
        self.Bpin = None

    def getpinA(self):
        if self.Apin == None:
            self.Apin = int(input("mgate" + self.getlabel() + "A="))

        return self.Apin

    def getpinB(self):
        if self.Bpin == None:
            self.Bpin = int(input("mgate" + self.getlabel() + "B="))

        return self.Bpin


# 单头逻辑门类
class Sgate(Logicgate):
    def __init__(self, n):
        super().__init__(n)

        self.Apin = None

    def getpinA(self):
        if self.Apin == None:
            self.Apin = int(input("sgate" + self.getlabel() + "="))
        return self.Apin


# 与门
class Andgate(Mgate):

    def __init__(self, n):
        super().__init__(n)

    def logicaljisuan(self):

        a = self.getpinA()
        b = self.getpinB()
        if a == 1 and b == 1:
            return 1
        else:
            return 0


# 或门
class Orgate(Mgate):
    def __init__(self, n):
        super().__init__(n)

    def logicaljisuan(self):
        a = self.getpinA()
        b = self.getpinB()
        if a == 0 and b == 0:
            return 0
        else:
            return 1


# 非门
class Notgate(Sgate):
    def __init__(self, n):
        super().__init__(n)

    def logicaljisuan(self):
        a = self.getpinA()
        if a == 1:
            return 0
        else:
            return 1

# 连接器
class Connector:
    def __init__(self, fromgate, togate):
        if togate.Apin == None:
            togate.Apin = fromgate.getoutput()
        else:
            if togate.Bpin == None:
                togate.Bpin = fromgate.getoutput()

#主函数
g1 = Andgate("G1")
g2 = Orgate("G2")
g3 = Andgate("G3")
g4 = Orgate("G4")
g5 = Notgate("G5")
c1=Connector(g1,g3)
c2=Connector(g2,g3)
Connector(g3,g4)
Connector(g5,g4)
a=g4.getoutput()
print(a)
